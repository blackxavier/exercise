version: 2.1
# Use a package of configuration called an orb.
orbs:
  aws-cli: circleci/aws-cli@2.0.3
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment command
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}


jobs:
  myjob1:  # Choose any name, such as `build`
      # The primary container, where your job's commands will run
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout # check out the code in the project directory
        - run: echo "DevOps guy" # run the `echo` command

  create-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
                --region us-east-1
        - destroy_environment:
            when:
              on_fail
    
    # Exercise: Config and Deployment
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["2a:04:b8:12:08:83:44:5e:8e:a4:6f:f8:bc:bd:b4:35"] 
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory main-remote.yml
      - destroy_environment:
          when:
            on_fail
  
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      - destroy_environment:
          when:
            on_fail

  failed_job_that_does_rollback:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: stimulate error 
          command: return 2022
      - destroy_environment:
          when:
            on_fail

# Sequential workflow
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
      - myjob1
      # - create-infrastructure
      - configure_infrastructure
      - smoke_test
      - failed_job_that_does_rollback:
          requires:
            - configure_infrastructure
            - smoke_test
            - myjob1
